version: '3.7'
services:
  proxy:
    container_name: traefik
    image: traefik:v2.2
    networks:
      - traefik-public
      - default
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "80:80"
      - "8090:8080"
    command:
       # Enable Docker in Traefik, so that it reads labels from Docker services
      - --providers.docker
      # Do not expose all Docker services, only the ones explicitly exposed
      - --providers.docker.exposedbydefault=false
      # Disable Docker Swarm mode for local development
      # - --providers.docker.swarmmode
      # Enable the access log, with HTTP requests
      - --accesslog
      # Enable the Traefik log, for configurations and errors
      - --log
      # Enable the Dashboard and API
      - --api
      # Enable the Dashboard and API in insecure mode for local development
      - --api.insecure=true
    labels:
      - traefik.docker.network=traefik-public
      - traefik.http.routers.${STACK_NAME?Variable not set}-traefik-public-http.rule=Host(`${DOMAIN?Variable not set}`)
      - traefik.http.services.${STACK_NAME?Variable not set}-traefik-public.loadbalancer.server.port=80
  
  mongodb:
    image: bitnami/mongodb:latest
    container_name: mongodb
    env_file:
      - .env
    healthcheck:
      test: echo 'db.runCommand({serverStatus:1}).ok' | mongo admin -u root -p $MONGODB_ROOT_PASSWORD --quiet | grep 1
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 20s
    networks:
      - default

  # Elasticsearch Docker Images: https://www.docker.elastic.co/
  elasticsearch:
    image: elasticsearch:1.7.6-alpine
    container_name: elasticsearch
    environment:
      - node.name=elasticsearch
      - xpack.security.enabled=false
      - discovery.type=single-node
      - http.cors.enabled=true
      - http.cors.allow-origin=*
      - discovery.zen.ping.unicast.hosts=127.0.0.1

    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    cap_add:
      - IPC_LOCK
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
      - elasticsearch-config:/usr/share/elasticsearch/config
    networks:
      - default

  augmenterservice:
    build: .
    restart: always
    container_name: augmenterservice
    volumes:
      - ".:/app"
    env_file:
      - .env
    environment:
      - ELASTICSEARCH_URL=http://elasticsearch:9200 
      - SURVEYINTERLINK_URL=http://${DOMAIN}/surveymod
      - AUTHINTERLINK_URL=http://${DOMAIN}/auth
      - HOST=0.0.0.0
      - VIRTUAL_HOST=servicepedia.${DOMAIN?Variable not set}
      - PORT=${PORT_SERVICEPEDIA}
      - PROTOCOL=http://
      - BASE_PATH=

 
    depends_on:
      - elasticsearch
      - survey
      - auth
      - rabbitmq
    networks:
      - traefik-public
      - default
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.http.services.${STACK_NAME?Variable not set}-augmenterservice.loadbalancer.server.port=${PORT_SERVICEPEDIA}
      - traefik.http.routers.${STACK_NAME?Variable not set}-augmenterservice.rule=Host(`${DOMAIN}`) 
    command: gunicorn --reload --log-level debug  --bind 0.0.0.0:${PORT_SERVICEPEDIA} --workers 1 --threads 100  "app.main:create_app()" --preload
    #command: gunicorn --worker-class eventlet -w 1 "app.main:create_app()" --preload


# command: gunicorn --reload --log-level info  --bind 0.0.0.0:${PORT_SERVICEPEDIA} --workers 1 "app.main:create_app()" --preload

#gunicorn -k gevent -w 1 module:app

 # Survey Interlinker
  survey:
    build:
      context: ./surveyapp
      dockerfile: Dockerfile
      target: dev
    volumes:
      - ./surveyapp/app:/app
    container_name: ${STACK_NAME?Variable not set}-survey
    env_file:
      - ./.env
    environment:
      - MODE=integrated
      - SERVER_NAME=${DOMAIN?Variable not set}
      - PORT=${PORT}
      - BASE_PATH=/surveymod
      - PROTOCOL=http://
      - MONGODB_URL=mongodb://${MONGODB_USERNAME}:${MONGODB_PASSWORD}@mongodb:27017/${MONGODB_DATABASE}?retryWrites=true&w=majority
      - COLLECTION_NAME=survey_assets
      - BACKEND_CORS_ORIGINS=["http://localhost","http://127.0.0.1","http://augmenterservice"]
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.http.services.${STACK_NAME?Variable not set}-surveymod.loadbalancer.server.port=${PORT}
      - traefik.http.routers.${STACK_NAME?Variable not set}-surveymod.rule=Host(`${DOMAIN}`) && PathPrefix(`/surveymod`)
      - traefik.http.routers.${STACK_NAME?Variable not set}-surveymod.middlewares=surveymod-stripprefix
      - traefik.http.middlewares.surveymod-stripprefix.stripprefix.prefixes=/surveymod
    networks:
      - traefik-public
      - default


  # Auth Service
  auth:
    image: interlinkproject/backend-auth:master
    container_name: ${STACK_NAME?Variable not set}-auth
    environment:
      - SERVER_NAME=${DOMAIN?Variable not set}
      - PORT=${PORT}
      - BASE_PATH=/auth
      - PROTOCOL=http://
      - MONGODB_URL=mongodb://${MONGODB_USERNAME}:${MONGODB_PASSWORD}@mongodb:27017/${MONGODB_DATABASE}?retryWrites=true&w=majority
      - COLLECTION_NAME=users
      - SERVER_METADATA_URL=https://aac.platform.smartcommunitylab.it/.well-known/openid-configuration

    env_file:
      - ./.env
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.http.services.${STACK_NAME?Variable not set}-auth.loadbalancer.server.port=${PORT}
      - traefik.http.routers.${STACK_NAME?Variable not set}-auth.rule=Host(`${DOMAIN}`) && PathPrefix(`/auth`)
    networks:
      - traefik-public
      - default

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    env_file:
      - ./.env
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3
    networks:
      - traefik-public
      - default
    

  logging:
    image: interlinkproject/backend-logging:v1.0.0
    container_name: logging

    env_file:
      - ./.env
    restart: on-failure
    networks:
      - traefik-public
      - default
    depends_on:
      rabbitmq:
        condition: service_healthy
    command: ["./wait-for-it.sh", "rabbitmq:5672", "--", "python", "./main.py"]
    
 
    
      
      


volumes:
  elasticsearch-data:
    driver: local
  elasticsearch-config:
    driver: local
  mongodb-data:
    driver: local

networks:
  traefik-public:
  default: